/*
 	문제출처 : BACKJOON, https://www.acmicpc.net/problem/15652
 	문제번호 : 15652
 	알고리즘 : 백트래킹
*/
package Step_15_백트래킹.a9663_NQueen;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

/**
 * 문제풀이 컨셉
 * dfs쓰면서 N * N의 boolean[][] 체스판에 퀸이 놓일경우
 * 해당 좌표로붙처 가로,세로,대각선을 모두 true로 바꿔준다.
 * 
 * 메모 : 이방식으로 답은나오는데, 백준제출하면 메모리초과뜸. 설계를 바꿔야함
 */

class nQueenInfo {
	int N;
	boolean[][] nQueenBoard = null;		// 퀸이 체스판위에 올라가져있는 정보
	boolean[][] impossibleArea = null;	// 퀸이 체스판위에 올라갈수있는 좌표에는 false / true 표시에는 퀸을 둘 수 없음.
	int nQueenCnt = 0;	// 체스판에 퀸이 놓인 개수
	int totalCnt = 0;

	nQueenInfo(int N) {
		this.N = N;
		nQueenBoard = new boolean[N][N];
	}
}

class Main {
	/*
	// Queen 위치 출력
	public void printNQueen(nQueenInfo nqi) {
		for(int i = 0; i < nqi.N; i++) {
			for(int j = 0; j < nqi.N; j++) {
				if(nqi.nQueenBoard[i][j]) {
					System.out.print("O ");
				} else {
					System.out.print("X ");
				}
			}
			System.out.println();
		}
		System.out.println("==================");
	}
	*/

	/*
	// Queen이 놓일 수 없는 영역을나타내는 impossibleArea 출력(true: 퀸이 놓일 수 없는 영역, false : 퀸이 놓일 수 있는 영역)
	public void printArea(boolean[][] impossibleArea, int N) {
		for(int i = 0; i < N; i++) {
			for(int j = 0; j < N; j++) {
				if(impossibleArea[i][j]) {
					System.out.print("O ");
				} else {
					System.out.print("X ");
				}
			}
			System.out.println();
		}
		System.out.println("==================");
	}
	 */

	/**
	 * @param nqi				: nQueen 정보가 들어가있는 클래스
	 * @param x					: nQueen이 놓인 x좌표
	 * @param y					: nQueen이 놓인 y좌표
	 * @param impossibleArea	: false인 위치에만 Queen이 놓일 수 있음. nQueen이 놓인 위치를기준으로 가로,대각선을 모두 true로설정하여 다음 퀸이 놓일 수 없게 설정함.
	 */
	public boolean[][] initCoordinate(nQueenInfo nqi, int x, int y, boolean[][] impossibleArea) {
		int xCompen1 = 0, yCompen1 = 0;	//  [\]모양의 대각선방향으로 위에서부터 아래방향으로 초기화하기위해 맨왼쪽상단끝으로 좌표를 지정해주기위한 보정값
		int xCompen2 = 0, yCompen2 = 0;	//  [/]모양의 대각선방향으로 아래에서부터 위방향으로 초기화하기위해 맨왼쪽하단끝으로 좌표를 지정해주기위한 보정값

		if(x < y) {
			xCompen1 = 0;
			yCompen1 = y - x;
			xCompen2 = x + y > nqi.N-1 ? nqi.N-1 : x + y;
			yCompen2 = y - (nqi.N-1-x) < 0 ? 0 : y - (nqi.N-1-x);
		} else {
			xCompen1 = x - y;
			yCompen1 = 0;
			xCompen2 = x + y > nqi.N-1 ? nqi.N-1 : x + y;
			yCompen2 = y - (nqi.N-1-x) < 0 ? 0 : y - (nqi.N-1-x);
		}
		
		for(int i = 0; i < nqi.N; i++) {
			// nQueen이 위치한좌표의 가로축을 모두 true로 초기화
			if(!impossibleArea[x][i]) {
				impossibleArea[x][i] = true;
			}

			// nQueen이 위치한좌표의 세로축을 모두 true로 초기화
			if(!impossibleArea[i][y]) {
				impossibleArea[i][y] = true;
			}

			// nQueen이 위치한좌표의 [\]모양의 대각선방향을 모두 true로 초기화
			if(xCompen1+i < nqi.N && yCompen1+i < nqi.N && !impossibleArea[xCompen1+i][yCompen1+i]) {
				impossibleArea[xCompen1+i][yCompen1+i] = true;
			}

			// nQueen이 위치한좌표의 [/]모양의 대각선방향을 모두 true로 초기화
			if(xCompen2-i >= 0 && yCompen2+i < nqi.N && !impossibleArea[xCompen2-i][yCompen2+i]) {
				impossibleArea[xCompen2-i][yCompen2+i] = true;
			}

		}
		// printArea(impossibleArea, nqi.N);
		return impossibleArea;
	}

	/**
	 * @param nqi				: nQueen 정보가 들어가있는 클래스
	 * @param impossibleArea	: false인 위치에만 Queen이 놓일 수 있음. nQueen이 놓인 위치를기준으로 가로,대각선을 모두 true로설정하여 다음 퀸이 놓일 수 없게 설정함.
	 * @param nowDepth			: dfs depth
	 */
	public void dfs(nQueenInfo nqi, boolean[][] impossibleArea, int nowDepth) {
		
		if(nowDepth == nqi.N  && nqi.nQueenCnt == nqi.N) {
			// printNQueen(nqi);
			nqi.totalCnt++;
			return;
		}

		for(int i = nowDepth; i < nqi.N; i++) {	// i = nowDepth부터 시작한다. 0부터시작할 필요 없음.
			for(int j = 0; j < nqi.N; j++) {

				
				if( i > nqi.nQueenCnt) {	// ex) 퀸이 첫번째 행에 놓이고, 두번째 행에 놓이지 못한채 세번째행에 놓였다면. 더이상 진행할 필요가 없음.
					break;
				}

				if(!impossibleArea[i][j]) {	// 퀸이 놓일 수 있는 위치라면
					boolean[][] copyImpossibleArea = new boolean[nqi.N][nqi.N];
					for(int x = 0; x < impossibleArea.length; x++) {	// 퀸이 놓일수없는 위치정보배열 복사
						copyImpossibleArea[x] = impossibleArea[x].clone();
					}

					nqi.nQueenBoard[i][j] = true;	// 퀸 놓임
					nqi.nQueenCnt++;				// 퀸이 놓인 개수 +1
					copyImpossibleArea = initCoordinate(nqi, i, j, copyImpossibleArea);	// 퀸이놓인 i,j 좌표를기준으로. 놓일수없는 영역 설정
					dfs(nqi, copyImpossibleArea, nowDepth+1);							// dfs recursive call
					nqi.nQueenBoard[i][j] = false;										// 놓았던 퀸을 뺌
					nqi.nQueenCnt--;													// 퀸이 놓인 개수 -1
				}
			}
		}

	}

	public static void main(String[] args) throws IOException{
		Main main = new Main();
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

		int N = Integer.parseInt(br.readLine());
		nQueenInfo nqi = new nQueenInfo(N);	// nQueen 관련 정보를 가지고있을 클래스

		for(int i = 0; i < N; i++) {	// 0행 고정시켜놓고, 체스를 0행에서 한칸씩 오른쪽 으로 둬봄
			nqi.nQueenCnt = 0;
			nqi.impossibleArea = new boolean[N][N];
			nqi.nQueenBoard[0][i] = true;
			nqi.nQueenCnt++;
			nqi.impossibleArea = main.initCoordinate(nqi, 0, i, nqi.impossibleArea);
			main.dfs(nqi, nqi.impossibleArea, 1);
		}
		br.close();
		bw.write(Integer.toString(nqi.totalCnt));
		bw.flush();
		bw.close();
	}
}